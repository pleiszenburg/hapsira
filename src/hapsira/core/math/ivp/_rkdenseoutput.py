from ._const import FSIG, KSIG, N_STAGES
from ._dop853_coefficients import A as _A, C as _C, D as _D
from ..ieee754 import float_
from ..linalg import (
    add_VV_hf,
    mul_Vs_hf,
    sub_VV_hf,
)
from ...jit import hjit, DSIG

__all__ = [
    "dense_output_hf",
]


A00 = tuple(float_(number) for number in _A[N_STAGES + 1, :13])
A01 = tuple(float_(number) for number in _A[N_STAGES + 2, :14])
A02 = tuple(float_(number) for number in _A[N_STAGES + 3, :15])
C_EXTRA = tuple(float_(number) for number in _C[N_STAGES + 1 :])
D00 = tuple(float_(number) for number in _D[0, :])
D01 = tuple(float_(number) for number in _D[1, :])
D02 = tuple(float_(number) for number in _D[2, :])
D03 = tuple(float_(number) for number in _D[3, :])


@hjit(f"Tuple([f,f,V,V,{FSIG:s}])(F({DSIG:s}),f,f,f,f,V,V,V,V,V,V,{KSIG:s})")
def dense_output_hf(fun, argk, t_old, t, h, rr, vv, rr_old, vv_old, fr, fv, K):
    """Compute a local interpolant over the last successful step.

    Returns
    -------
    sol : `DenseOutput`
        Local interpolant over the last successful step.
    """

    assert t_old is not None
    assert t != t_old

    K00, K01, K02, K03, K04, K05, K06, K07, K08, K09, K10, K11, K12 = K

    dr = (
        (
            K00[0] * A00[0]
            + K01[0] * A00[1]
            + K02[0] * A00[2]
            + K03[0] * A00[3]
            + K04[0] * A00[4]
            + K05[0] * A00[5]
            + K06[0] * A00[6]
            + K07[0] * A00[7]
            + K08[0] * A00[8]
            + K09[0] * A00[9]
            + K10[0] * A00[10]
            + K11[0] * A00[11]
            + K12[0] * A00[12]
        )
        * h,
        (
            K00[1] * A00[0]
            + K01[1] * A00[1]
            + K02[1] * A00[2]
            + K03[1] * A00[3]
            + K04[1] * A00[4]
            + K05[1] * A00[5]
            + K06[1] * A00[6]
            + K07[1] * A00[7]
            + K08[1] * A00[8]
            + K09[1] * A00[9]
            + K10[1] * A00[10]
            + K11[1] * A00[11]
            + K12[1] * A00[12]
        )
        * h,
        (
            K00[2] * A00[0]
            + K01[2] * A00[1]
            + K02[2] * A00[2]
            + K03[2] * A00[3]
            + K04[2] * A00[4]
            + K05[2] * A00[5]
            + K06[2] * A00[6]
            + K07[2] * A00[7]
            + K08[2] * A00[8]
            + K09[2] * A00[9]
            + K10[2] * A00[10]
            + K11[2] * A00[11]
            + K12[2] * A00[12]
        )
        * h,
    )
    dv = (
        (
            K00[3] * A00[0]
            + K01[3] * A00[1]
            + K02[3] * A00[2]
            + K03[3] * A00[3]
            + K04[3] * A00[4]
            + K05[3] * A00[5]
            + K06[3] * A00[6]
            + K07[3] * A00[7]
            + K08[3] * A00[8]
            + K09[3] * A00[9]
            + K10[3] * A00[10]
            + K11[3] * A00[11]
            + K12[3] * A00[12]
        )
        * h,
        (
            K00[4] * A00[0]
            + K01[4] * A00[1]
            + K02[4] * A00[2]
            + K03[4] * A00[3]
            + K04[4] * A00[4]
            + K05[4] * A00[5]
            + K06[4] * A00[6]
            + K07[4] * A00[7]
            + K08[4] * A00[8]
            + K09[4] * A00[9]
            + K10[4] * A00[10]
            + K11[4] * A00[11]
            + K12[4] * A00[12]
        )
        * h,
        (
            K00[5] * A00[0]
            + K01[5] * A00[1]
            + K02[5] * A00[2]
            + K03[5] * A00[3]
            + K04[5] * A00[4]
            + K05[5] * A00[5]
            + K06[5] * A00[6]
            + K07[5] * A00[7]
            + K08[5] * A00[8]
            + K09[5] * A00[9]
            + K10[5] * A00[10]
            + K11[5] * A00[11]
            + K12[5] * A00[12]
        )
        * h,
    )
    rr_ = add_VV_hf(rr_old, dr)
    vv_ = add_VV_hf(vv_old, dv)
    rr_, vv_ = fun(
        t_old + C_EXTRA[0] * h,
        rr_,
        vv_,
        argk,
    )
    K13 = *rr_, *vv_

    dr = (
        (
            K00[0] * A01[0]
            + K01[0] * A01[1]
            + K02[0] * A01[2]
            + K03[0] * A01[3]
            + K04[0] * A01[4]
            + K05[0] * A01[5]
            + K06[0] * A01[6]
            + K07[0] * A01[7]
            + K08[0] * A01[8]
            + K09[0] * A01[9]
            + K10[0] * A01[10]
            + K11[0] * A01[11]
            + K12[0] * A01[12]
            + K13[0] * A01[13]
        )
        * h,
        (
            K00[1] * A01[0]
            + K01[1] * A01[1]
            + K02[1] * A01[2]
            + K03[1] * A01[3]
            + K04[1] * A01[4]
            + K05[1] * A01[5]
            + K06[1] * A01[6]
            + K07[1] * A01[7]
            + K08[1] * A01[8]
            + K09[1] * A01[9]
            + K10[1] * A01[10]
            + K11[1] * A01[11]
            + K12[1] * A01[12]
            + K13[1] * A01[13]
        )
        * h,
        (
            K00[2] * A01[0]
            + K01[2] * A01[1]
            + K02[2] * A01[2]
            + K03[2] * A01[3]
            + K04[2] * A01[4]
            + K05[2] * A01[5]
            + K06[2] * A01[6]
            + K07[2] * A01[7]
            + K08[2] * A01[8]
            + K09[2] * A01[9]
            + K10[2] * A01[10]
            + K11[2] * A01[11]
            + K12[2] * A01[12]
            + K13[2] * A01[13]
        )
        * h,
    )
    dv = (
        (
            K00[3] * A01[0]
            + K01[3] * A01[1]
            + K02[3] * A01[2]
            + K03[3] * A01[3]
            + K04[3] * A01[4]
            + K05[3] * A01[5]
            + K06[3] * A01[6]
            + K07[3] * A01[7]
            + K08[3] * A01[8]
            + K09[3] * A01[9]
            + K10[3] * A01[10]
            + K11[3] * A01[11]
            + K12[3] * A01[12]
            + K13[3] * A01[13]
        )
        * h,
        (
            K00[4] * A01[0]
            + K01[4] * A01[1]
            + K02[4] * A01[2]
            + K03[4] * A01[3]
            + K04[4] * A01[4]
            + K05[4] * A01[5]
            + K06[4] * A01[6]
            + K07[4] * A01[7]
            + K08[4] * A01[8]
            + K09[4] * A01[9]
            + K10[4] * A01[10]
            + K11[4] * A01[11]
            + K12[4] * A01[12]
            + K13[4] * A01[13]
        )
        * h,
        (
            K00[5] * A01[0]
            + K01[5] * A01[1]
            + K02[5] * A01[2]
            + K03[5] * A01[3]
            + K04[5] * A01[4]
            + K05[5] * A01[5]
            + K06[5] * A01[6]
            + K07[5] * A01[7]
            + K08[5] * A01[8]
            + K09[5] * A01[9]
            + K10[5] * A01[10]
            + K11[5] * A01[11]
            + K12[5] * A01[12]
            + K13[5] * A01[13]
        )
        * h,
    )
    rr_ = add_VV_hf(rr_old, dr)
    vv_ = add_VV_hf(vv_old, dv)
    rr_, vv_ = fun(
        t_old + C_EXTRA[1] * h,
        rr_,
        vv_,
        argk,
    )
    K14 = *rr_, *vv_

    dr = (
        (
            K00[0] * A02[0]
            + K01[0] * A02[1]
            + K02[0] * A02[2]
            + K03[0] * A02[3]
            + K04[0] * A02[4]
            + K05[0] * A02[5]
            + K06[0] * A02[6]
            + K07[0] * A02[7]
            + K08[0] * A02[8]
            + K09[0] * A02[9]
            + K10[0] * A02[10]
            + K11[0] * A02[11]
            + K12[0] * A02[12]
            + K13[0] * A02[13]
            + K14[0] * A02[14]
        )
        * h,
        (
            K00[1] * A02[0]
            + K01[1] * A02[1]
            + K02[1] * A02[2]
            + K03[1] * A02[3]
            + K04[1] * A02[4]
            + K05[1] * A02[5]
            + K06[1] * A02[6]
            + K07[1] * A02[7]
            + K08[1] * A02[8]
            + K09[1] * A02[9]
            + K10[1] * A02[10]
            + K11[1] * A02[11]
            + K12[1] * A02[12]
            + K13[1] * A02[13]
            + K14[1] * A02[14]
        )
        * h,
        (
            K00[2] * A02[0]
            + K01[2] * A02[1]
            + K02[2] * A02[2]
            + K03[2] * A02[3]
            + K04[2] * A02[4]
            + K05[2] * A02[5]
            + K06[2] * A02[6]
            + K07[2] * A02[7]
            + K08[2] * A02[8]
            + K09[2] * A02[9]
            + K10[2] * A02[10]
            + K11[2] * A02[11]
            + K12[2] * A02[12]
            + K13[2] * A02[13]
            + K14[2] * A02[14]
        )
        * h,
    )
    dv = (
        (
            K00[3] * A02[0]
            + K01[3] * A02[1]
            + K02[3] * A02[2]
            + K03[3] * A02[3]
            + K04[3] * A02[4]
            + K05[3] * A02[5]
            + K06[3] * A02[6]
            + K07[3] * A02[7]
            + K08[3] * A02[8]
            + K09[3] * A02[9]
            + K10[3] * A02[10]
            + K11[3] * A02[11]
            + K12[3] * A02[12]
            + K13[3] * A02[13]
            + K14[3] * A02[14]
        )
        * h,
        (
            K00[4] * A02[0]
            + K01[4] * A02[1]
            + K02[4] * A02[2]
            + K03[4] * A02[3]
            + K04[4] * A02[4]
            + K05[4] * A02[5]
            + K06[4] * A02[6]
            + K07[4] * A02[7]
            + K08[4] * A02[8]
            + K09[4] * A02[9]
            + K10[4] * A02[10]
            + K11[4] * A02[11]
            + K12[4] * A02[12]
            + K13[4] * A02[13]
            + K14[4] * A02[14]
        )
        * h,
        (
            K00[5] * A02[0]
            + K01[5] * A02[1]
            + K02[5] * A02[2]
            + K03[5] * A02[3]
            + K04[5] * A02[4]
            + K05[5] * A02[5]
            + K06[5] * A02[6]
            + K07[5] * A02[7]
            + K08[5] * A02[8]
            + K09[5] * A02[9]
            + K10[5] * A02[10]
            + K11[5] * A02[11]
            + K12[5] * A02[12]
            + K13[5] * A02[13]
            + K14[5] * A02[14]
        )
        * h,
    )
    rr_ = add_VV_hf(rr_old, dr)
    vv_ = add_VV_hf(vv_old, dv)
    rr_, vv_ = fun(
        t_old + C_EXTRA[2] * h,
        rr_,
        vv_,
        argk,
    )
    K15 = *rr_, *vv_

    fr_old = K00[:3]
    fv_old = K00[3:]

    delta_rr = sub_VV_hf(rr, rr_old)
    delta_vv = sub_VV_hf(vv, vv_old)

    F00 = *delta_rr, *delta_vv
    F01 = *sub_VV_hf(mul_Vs_hf(fr_old, h), delta_rr), *sub_VV_hf(
        mul_Vs_hf(fv_old, h), delta_vv
    )
    F02 = *sub_VV_hf(
        mul_Vs_hf(delta_rr, 2), mul_Vs_hf(add_VV_hf(fr, fr_old), h)
    ), *sub_VV_hf(mul_Vs_hf(delta_vv, 2), mul_Vs_hf(add_VV_hf(fv, fv_old), h))

    F03 = (
        (
            D00[0] * K00[0]
            + D00[1] * K01[0]
            + D00[2] * K02[0]
            + D00[3] * K03[0]
            + D00[4] * K04[0]
            + D00[5] * K05[0]
            + D00[6] * K06[0]
            + D00[7] * K07[0]
            + D00[8] * K08[0]
            + D00[9] * K09[0]
            + D00[10] * K10[0]
            + D00[11] * K11[0]
            + D00[12] * K12[0]
            + D00[13] * K13[0]
            + D00[14] * K14[0]
            + D00[15] * K15[0]
        )
        * h,
        (
            D00[0] * K00[1]
            + D00[1] * K01[1]
            + D00[2] * K02[1]
            + D00[3] * K03[1]
            + D00[4] * K04[1]
            + D00[5] * K05[1]
            + D00[6] * K06[1]
            + D00[7] * K07[1]
            + D00[8] * K08[1]
            + D00[9] * K09[1]
            + D00[10] * K10[1]
            + D00[11] * K11[1]
            + D00[12] * K12[1]
            + D00[13] * K13[1]
            + D00[14] * K14[1]
            + D00[15] * K15[1]
        )
        * h,
        (
            D00[0] * K00[2]
            + D00[1] * K01[2]
            + D00[2] * K02[2]
            + D00[3] * K03[2]
            + D00[4] * K04[2]
            + D00[5] * K05[2]
            + D00[6] * K06[2]
            + D00[7] * K07[2]
            + D00[8] * K08[2]
            + D00[9] * K09[2]
            + D00[10] * K10[2]
            + D00[11] * K11[2]
            + D00[12] * K12[2]
            + D00[13] * K13[2]
            + D00[14] * K14[2]
            + D00[15] * K15[2]
        )
        * h,
        (
            D00[0] * K00[3]
            + D00[1] * K01[3]
            + D00[2] * K02[3]
            + D00[3] * K03[3]
            + D00[4] * K04[3]
            + D00[5] * K05[3]
            + D00[6] * K06[3]
            + D00[7] * K07[3]
            + D00[8] * K08[3]
            + D00[9] * K09[3]
            + D00[10] * K10[3]
            + D00[11] * K11[3]
            + D00[12] * K12[3]
            + D00[13] * K13[3]
            + D00[14] * K14[3]
            + D00[15] * K15[3]
        )
        * h,
        (
            D00[0] * K00[4]
            + D00[1] * K01[4]
            + D00[2] * K02[4]
            + D00[3] * K03[4]
            + D00[4] * K04[4]
            + D00[5] * K05[4]
            + D00[6] * K06[4]
            + D00[7] * K07[4]
            + D00[8] * K08[4]
            + D00[9] * K09[4]
            + D00[10] * K10[4]
            + D00[11] * K11[4]
            + D00[12] * K12[4]
            + D00[13] * K13[4]
            + D00[14] * K14[4]
            + D00[15] * K15[4]
        )
        * h,
        (
            D00[0] * K00[5]
            + D00[1] * K01[5]
            + D00[2] * K02[5]
            + D00[3] * K03[5]
            + D00[4] * K04[5]
            + D00[5] * K05[5]
            + D00[6] * K06[5]
            + D00[7] * K07[5]
            + D00[8] * K08[5]
            + D00[9] * K09[5]
            + D00[10] * K10[5]
            + D00[11] * K11[5]
            + D00[12] * K12[5]
            + D00[13] * K13[5]
            + D00[14] * K14[5]
            + D00[15] * K15[5]
        )
        * h,
    )

    F04 = (
        (
            D01[0] * K00[0]
            + D01[1] * K01[0]
            + D01[2] * K02[0]
            + D01[3] * K03[0]
            + D01[4] * K04[0]
            + D01[5] * K05[0]
            + D01[6] * K06[0]
            + D01[7] * K07[0]
            + D01[8] * K08[0]
            + D01[9] * K09[0]
            + D01[10] * K10[0]
            + D01[11] * K11[0]
            + D01[12] * K12[0]
            + D01[13] * K13[0]
            + D01[14] * K14[0]
            + D01[15] * K15[0]
        )
        * h,
        (
            D01[0] * K00[1]
            + D01[1] * K01[1]
            + D01[2] * K02[1]
            + D01[3] * K03[1]
            + D01[4] * K04[1]
            + D01[5] * K05[1]
            + D01[6] * K06[1]
            + D01[7] * K07[1]
            + D01[8] * K08[1]
            + D01[9] * K09[1]
            + D01[10] * K10[1]
            + D01[11] * K11[1]
            + D01[12] * K12[1]
            + D01[13] * K13[1]
            + D01[14] * K14[1]
            + D01[15] * K15[1]
        )
        * h,
        (
            D01[0] * K00[2]
            + D01[1] * K01[2]
            + D01[2] * K02[2]
            + D01[3] * K03[2]
            + D01[4] * K04[2]
            + D01[5] * K05[2]
            + D01[6] * K06[2]
            + D01[7] * K07[2]
            + D01[8] * K08[2]
            + D01[9] * K09[2]
            + D01[10] * K10[2]
            + D01[11] * K11[2]
            + D01[12] * K12[2]
            + D01[13] * K13[2]
            + D01[14] * K14[2]
            + D01[15] * K15[2]
        )
        * h,
        (
            D01[0] * K00[3]
            + D01[1] * K01[3]
            + D01[2] * K02[3]
            + D01[3] * K03[3]
            + D01[4] * K04[3]
            + D01[5] * K05[3]
            + D01[6] * K06[3]
            + D01[7] * K07[3]
            + D01[8] * K08[3]
            + D01[9] * K09[3]
            + D01[10] * K10[3]
            + D01[11] * K11[3]
            + D01[12] * K12[3]
            + D01[13] * K13[3]
            + D01[14] * K14[3]
            + D01[15] * K15[3]
        )
        * h,
        (
            D01[0] * K00[4]
            + D01[1] * K01[4]
            + D01[2] * K02[4]
            + D01[3] * K03[4]
            + D01[4] * K04[4]
            + D01[5] * K05[4]
            + D01[6] * K06[4]
            + D01[7] * K07[4]
            + D01[8] * K08[4]
            + D01[9] * K09[4]
            + D01[10] * K10[4]
            + D01[11] * K11[4]
            + D01[12] * K12[4]
            + D01[13] * K13[4]
            + D01[14] * K14[4]
            + D01[15] * K15[4]
        )
        * h,
        (
            D01[0] * K00[5]
            + D01[1] * K01[5]
            + D01[2] * K02[5]
            + D01[3] * K03[5]
            + D01[4] * K04[5]
            + D01[5] * K05[5]
            + D01[6] * K06[5]
            + D01[7] * K07[5]
            + D01[8] * K08[5]
            + D01[9] * K09[5]
            + D01[10] * K10[5]
            + D01[11] * K11[5]
            + D01[12] * K12[5]
            + D01[13] * K13[5]
            + D01[14] * K14[5]
            + D01[15] * K15[5]
        )
        * h,
    )

    F05 = (
        (
            D02[0] * K00[0]
            + D02[1] * K01[0]
            + D02[2] * K02[0]
            + D02[3] * K03[0]
            + D02[4] * K04[0]
            + D02[5] * K05[0]
            + D02[6] * K06[0]
            + D02[7] * K07[0]
            + D02[8] * K08[0]
            + D02[9] * K09[0]
            + D02[10] * K10[0]
            + D02[11] * K11[0]
            + D02[12] * K12[0]
            + D02[13] * K13[0]
            + D02[14] * K14[0]
            + D02[15] * K15[0]
        )
        * h,
        (
            D02[0] * K00[1]
            + D02[1] * K01[1]
            + D02[2] * K02[1]
            + D02[3] * K03[1]
            + D02[4] * K04[1]
            + D02[5] * K05[1]
            + D02[6] * K06[1]
            + D02[7] * K07[1]
            + D02[8] * K08[1]
            + D02[9] * K09[1]
            + D02[10] * K10[1]
            + D02[11] * K11[1]
            + D02[12] * K12[1]
            + D02[13] * K13[1]
            + D02[14] * K14[1]
            + D02[15] * K15[1]
        )
        * h,
        (
            D02[0] * K00[2]
            + D02[1] * K01[2]
            + D02[2] * K02[2]
            + D02[3] * K03[2]
            + D02[4] * K04[2]
            + D02[5] * K05[2]
            + D02[6] * K06[2]
            + D02[7] * K07[2]
            + D02[8] * K08[2]
            + D02[9] * K09[2]
            + D02[10] * K10[2]
            + D02[11] * K11[2]
            + D02[12] * K12[2]
            + D02[13] * K13[2]
            + D02[14] * K14[2]
            + D02[15] * K15[2]
        )
        * h,
        (
            D02[0] * K00[3]
            + D02[1] * K01[3]
            + D02[2] * K02[3]
            + D02[3] * K03[3]
            + D02[4] * K04[3]
            + D02[5] * K05[3]
            + D02[6] * K06[3]
            + D02[7] * K07[3]
            + D02[8] * K08[3]
            + D02[9] * K09[3]
            + D02[10] * K10[3]
            + D02[11] * K11[3]
            + D02[12] * K12[3]
            + D02[13] * K13[3]
            + D02[14] * K14[3]
            + D02[15] * K15[3]
        )
        * h,
        (
            D02[0] * K00[4]
            + D02[1] * K01[4]
            + D02[2] * K02[4]
            + D02[3] * K03[4]
            + D02[4] * K04[4]
            + D02[5] * K05[4]
            + D02[6] * K06[4]
            + D02[7] * K07[4]
            + D02[8] * K08[4]
            + D02[9] * K09[4]
            + D02[10] * K10[4]
            + D02[11] * K11[4]
            + D02[12] * K12[4]
            + D02[13] * K13[4]
            + D02[14] * K14[4]
            + D02[15] * K15[4]
        )
        * h,
        (
            D02[0] * K00[5]
            + D02[1] * K01[5]
            + D02[2] * K02[5]
            + D02[3] * K03[5]
            + D02[4] * K04[5]
            + D02[5] * K05[5]
            + D02[6] * K06[5]
            + D02[7] * K07[5]
            + D02[8] * K08[5]
            + D02[9] * K09[5]
            + D02[10] * K10[5]
            + D02[11] * K11[5]
            + D02[12] * K12[5]
            + D02[13] * K13[5]
            + D02[14] * K14[5]
            + D02[15] * K15[5]
        )
        * h,
    )

    F06 = (
        (
            D03[0] * K00[0]
            + D03[1] * K01[0]
            + D03[2] * K02[0]
            + D03[3] * K03[0]
            + D03[4] * K04[0]
            + D03[5] * K05[0]
            + D03[6] * K06[0]
            + D03[7] * K07[0]
            + D03[8] * K08[0]
            + D03[9] * K09[0]
            + D03[10] * K10[0]
            + D03[11] * K11[0]
            + D03[12] * K12[0]
            + D03[13] * K13[0]
            + D03[14] * K14[0]
            + D03[15] * K15[0]
        )
        * h,
        (
            D03[0] * K00[1]
            + D03[1] * K01[1]
            + D03[2] * K02[1]
            + D03[3] * K03[1]
            + D03[4] * K04[1]
            + D03[5] * K05[1]
            + D03[6] * K06[1]
            + D03[7] * K07[1]
            + D03[8] * K08[1]
            + D03[9] * K09[1]
            + D03[10] * K10[1]
            + D03[11] * K11[1]
            + D03[12] * K12[1]
            + D03[13] * K13[1]
            + D03[14] * K14[1]
            + D03[15] * K15[1]
        )
        * h,
        (
            D03[0] * K00[2]
            + D03[1] * K01[2]
            + D03[2] * K02[2]
            + D03[3] * K03[2]
            + D03[4] * K04[2]
            + D03[5] * K05[2]
            + D03[6] * K06[2]
            + D03[7] * K07[2]
            + D03[8] * K08[2]
            + D03[9] * K09[2]
            + D03[10] * K10[2]
            + D03[11] * K11[2]
            + D03[12] * K12[2]
            + D03[13] * K13[2]
            + D03[14] * K14[2]
            + D03[15] * K15[2]
        )
        * h,
        (
            D03[0] * K00[3]
            + D03[1] * K01[3]
            + D03[2] * K02[3]
            + D03[3] * K03[3]
            + D03[4] * K04[3]
            + D03[5] * K05[3]
            + D03[6] * K06[3]
            + D03[7] * K07[3]
            + D03[8] * K08[3]
            + D03[9] * K09[3]
            + D03[10] * K10[3]
            + D03[11] * K11[3]
            + D03[12] * K12[3]
            + D03[13] * K13[3]
            + D03[14] * K14[3]
            + D03[15] * K15[3]
        )
        * h,
        (
            D03[0] * K00[4]
            + D03[1] * K01[4]
            + D03[2] * K02[4]
            + D03[3] * K03[4]
            + D03[4] * K04[4]
            + D03[5] * K05[4]
            + D03[6] * K06[4]
            + D03[7] * K07[4]
            + D03[8] * K08[4]
            + D03[9] * K09[4]
            + D03[10] * K10[4]
            + D03[11] * K11[4]
            + D03[12] * K12[4]
            + D03[13] * K13[4]
            + D03[14] * K14[4]
            + D03[15] * K15[4]
        )
        * h,
        (
            D03[0] * K00[5]
            + D03[1] * K01[5]
            + D03[2] * K02[5]
            + D03[3] * K03[5]
            + D03[4] * K04[5]
            + D03[5] * K05[5]
            + D03[6] * K06[5]
            + D03[7] * K07[5]
            + D03[8] * K08[5]
            + D03[9] * K09[5]
            + D03[10] * K10[5]
            + D03[11] * K11[5]
            + D03[12] * K12[5]
            + D03[13] * K13[5]
            + D03[14] * K14[5]
            + D03[15] * K15[5]
        )
        * h,
    )

    return (
        t_old,
        t - t_old,  # h
        rr_old,
        vv_old,
        (F00, F01, F02, F03, F04, F05, F06),
    )
