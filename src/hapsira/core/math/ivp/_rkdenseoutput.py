import numpy as np

from ._const import (
    N_RV,
    N_STAGES,
    N_STAGES_EXTENDED,
)
from ._dop853_coefficients import A as _A, C as _C, D as _D
from ..ieee754 import float_
from ..linalg import (
    add_VV_hf,
    mul_Vs_hf,
    sub_VV_hf,
)
from ...jit import array_to_V_hf

__all__ = [
    "dense_output_hf",
]


A00 = tuple(float_(number) for number in _A[N_STAGES + 1, :13])
A01 = tuple(float_(number) for number in _A[N_STAGES + 2, :14])
A02 = tuple(float_(number) for number in _A[N_STAGES + 3, :15])
C_EXTRA = tuple(float_(number) for number in _C[N_STAGES + 1 :])
D00 = tuple(float_(number) for number in _D[0, :])
D01 = tuple(float_(number) for number in _D[1, :])
D02 = tuple(float_(number) for number in _D[2, :])
D03 = tuple(float_(number) for number in _D[3, :])


# TODO compile
def dense_output_hf(fun, argk, t_old, t, h, rr, vv, rr_old, vv_old, fr, fv, K_):
    """Compute a local interpolant over the last successful step.

    Returns
    -------
    sol : `DenseOutput`
        Local interpolant over the last successful step.
    """

    assert t_old is not None
    assert t != t_old

    Ke = np.empty((N_STAGES_EXTENDED, N_RV), dtype=float)
    Ke[: N_STAGES + 1, :] = np.array(K_)

    K00, K01, K02, K03, K04, K05, K06, K07, K08, K09, K10, K11, K12 = K_

    dy = np.dot(Ke[:13].T, np.array(A00)) * h
    rr_ = add_VV_hf(rr_old, array_to_V_hf(dy[:3]))
    vv_ = add_VV_hf(vv_old, array_to_V_hf(dy[3:]))
    rr_, vv_ = fun(
        t_old + C_EXTRA[0] * h,
        rr_,
        vv_,
        argk,
    )
    Ke[13] = np.array([*rr_, *vv_])

    dy = np.dot(Ke[:14].T, np.array(A01)) * h
    rr_ = add_VV_hf(rr_old, array_to_V_hf(dy[:3]))
    vv_ = add_VV_hf(vv_old, array_to_V_hf(dy[3:]))
    rr_, vv_ = fun(
        t_old + C_EXTRA[1] * h,
        rr_,
        vv_,
        argk,
    )
    Ke[14] = np.array([*rr_, *vv_])

    dy = np.dot(Ke[:15].T, np.array(A02)) * h
    rr_ = add_VV_hf(rr_old, array_to_V_hf(dy[:3]))
    vv_ = add_VV_hf(vv_old, array_to_V_hf(dy[3:]))
    rr_, vv_ = fun(
        t_old + C_EXTRA[2] * h,
        rr_,
        vv_,
        argk,
    )
    Ke[15] = np.array([*rr_, *vv_])

    fr_old = array_to_V_hf(Ke[0, :3])
    fv_old = array_to_V_hf(Ke[0, 3:])

    delta_rr = sub_VV_hf(rr, rr_old)
    delta_vv = sub_VV_hf(vv, vv_old)

    F00 = *delta_rr, *delta_vv
    F01 = *sub_VV_hf(mul_Vs_hf(fr_old, h), delta_rr), *sub_VV_hf(
        mul_Vs_hf(fv_old, h), delta_vv
    )
    F02 = *sub_VV_hf(
        mul_Vs_hf(delta_rr, 2), mul_Vs_hf(add_VV_hf(fr, fr_old), h)
    ), *sub_VV_hf(mul_Vs_hf(delta_vv, 2), mul_Vs_hf(add_VV_hf(fv, fv_old), h))

    K13 = tuple(float_(number) for number in Ke[13, :])
    K14 = tuple(float_(number) for number in Ke[14, :])
    K15 = tuple(float_(number) for number in Ke[15, :])

    F03 = (
        (
            D00[0] * K00[0]
            + D00[1] * K01[0]
            + D00[2] * K02[0]
            + D00[3] * K03[0]
            + D00[4] * K04[0]
            + D00[5] * K05[0]
            + D00[6] * K06[0]
            + D00[7] * K07[0]
            + D00[8] * K08[0]
            + D00[9] * K09[0]
            + D00[10] * K10[0]
            + D00[11] * K11[0]
            + D00[12] * K12[0]
            + D00[13] * K13[0]
            + D00[14] * K14[0]
            + D00[15] * K15[0]
        )
        * h,
        (
            D00[0] * K00[1]
            + D00[1] * K01[1]
            + D00[2] * K02[1]
            + D00[3] * K03[1]
            + D00[4] * K04[1]
            + D00[5] * K05[1]
            + D00[6] * K06[1]
            + D00[7] * K07[1]
            + D00[8] * K08[1]
            + D00[9] * K09[1]
            + D00[10] * K10[1]
            + D00[11] * K11[1]
            + D00[12] * K12[1]
            + D00[13] * K13[1]
            + D00[14] * K14[1]
            + D00[15] * K15[1]
        )
        * h,
        (
            D00[0] * K00[2]
            + D00[1] * K01[2]
            + D00[2] * K02[2]
            + D00[3] * K03[2]
            + D00[4] * K04[2]
            + D00[5] * K05[2]
            + D00[6] * K06[2]
            + D00[7] * K07[2]
            + D00[8] * K08[2]
            + D00[9] * K09[2]
            + D00[10] * K10[2]
            + D00[11] * K11[2]
            + D00[12] * K12[2]
            + D00[13] * K13[2]
            + D00[14] * K14[2]
            + D00[15] * K15[2]
        )
        * h,
        (
            D00[0] * K00[3]
            + D00[1] * K01[3]
            + D00[2] * K02[3]
            + D00[3] * K03[3]
            + D00[4] * K04[3]
            + D00[5] * K05[3]
            + D00[6] * K06[3]
            + D00[7] * K07[3]
            + D00[8] * K08[3]
            + D00[9] * K09[3]
            + D00[10] * K10[3]
            + D00[11] * K11[3]
            + D00[12] * K12[3]
            + D00[13] * K13[3]
            + D00[14] * K14[3]
            + D00[15] * K15[3]
        )
        * h,
        (
            D00[0] * K00[4]
            + D00[1] * K01[4]
            + D00[2] * K02[4]
            + D00[3] * K03[4]
            + D00[4] * K04[4]
            + D00[5] * K05[4]
            + D00[6] * K06[4]
            + D00[7] * K07[4]
            + D00[8] * K08[4]
            + D00[9] * K09[4]
            + D00[10] * K10[4]
            + D00[11] * K11[4]
            + D00[12] * K12[4]
            + D00[13] * K13[4]
            + D00[14] * K14[4]
            + D00[15] * K15[4]
        )
        * h,
        (
            D00[0] * K00[5]
            + D00[1] * K01[5]
            + D00[2] * K02[5]
            + D00[3] * K03[5]
            + D00[4] * K04[5]
            + D00[5] * K05[5]
            + D00[6] * K06[5]
            + D00[7] * K07[5]
            + D00[8] * K08[5]
            + D00[9] * K09[5]
            + D00[10] * K10[5]
            + D00[11] * K11[5]
            + D00[12] * K12[5]
            + D00[13] * K13[5]
            + D00[14] * K14[5]
            + D00[15] * K15[5]
        )
        * h,
    )

    F04 = (
        (
            D01[0] * K00[0]
            + D01[1] * K01[0]
            + D01[2] * K02[0]
            + D01[3] * K03[0]
            + D01[4] * K04[0]
            + D01[5] * K05[0]
            + D01[6] * K06[0]
            + D01[7] * K07[0]
            + D01[8] * K08[0]
            + D01[9] * K09[0]
            + D01[10] * K10[0]
            + D01[11] * K11[0]
            + D01[12] * K12[0]
            + D01[13] * K13[0]
            + D01[14] * K14[0]
            + D01[15] * K15[0]
        )
        * h,
        (
            D01[0] * K00[1]
            + D01[1] * K01[1]
            + D01[2] * K02[1]
            + D01[3] * K03[1]
            + D01[4] * K04[1]
            + D01[5] * K05[1]
            + D01[6] * K06[1]
            + D01[7] * K07[1]
            + D01[8] * K08[1]
            + D01[9] * K09[1]
            + D01[10] * K10[1]
            + D01[11] * K11[1]
            + D01[12] * K12[1]
            + D01[13] * K13[1]
            + D01[14] * K14[1]
            + D01[15] * K15[1]
        )
        * h,
        (
            D01[0] * K00[2]
            + D01[1] * K01[2]
            + D01[2] * K02[2]
            + D01[3] * K03[2]
            + D01[4] * K04[2]
            + D01[5] * K05[2]
            + D01[6] * K06[2]
            + D01[7] * K07[2]
            + D01[8] * K08[2]
            + D01[9] * K09[2]
            + D01[10] * K10[2]
            + D01[11] * K11[2]
            + D01[12] * K12[2]
            + D01[13] * K13[2]
            + D01[14] * K14[2]
            + D01[15] * K15[2]
        )
        * h,
        (
            D01[0] * K00[3]
            + D01[1] * K01[3]
            + D01[2] * K02[3]
            + D01[3] * K03[3]
            + D01[4] * K04[3]
            + D01[5] * K05[3]
            + D01[6] * K06[3]
            + D01[7] * K07[3]
            + D01[8] * K08[3]
            + D01[9] * K09[3]
            + D01[10] * K10[3]
            + D01[11] * K11[3]
            + D01[12] * K12[3]
            + D01[13] * K13[3]
            + D01[14] * K14[3]
            + D01[15] * K15[3]
        )
        * h,
        (
            D01[0] * K00[4]
            + D01[1] * K01[4]
            + D01[2] * K02[4]
            + D01[3] * K03[4]
            + D01[4] * K04[4]
            + D01[5] * K05[4]
            + D01[6] * K06[4]
            + D01[7] * K07[4]
            + D01[8] * K08[4]
            + D01[9] * K09[4]
            + D01[10] * K10[4]
            + D01[11] * K11[4]
            + D01[12] * K12[4]
            + D01[13] * K13[4]
            + D01[14] * K14[4]
            + D01[15] * K15[4]
        )
        * h,
        (
            D01[0] * K00[5]
            + D01[1] * K01[5]
            + D01[2] * K02[5]
            + D01[3] * K03[5]
            + D01[4] * K04[5]
            + D01[5] * K05[5]
            + D01[6] * K06[5]
            + D01[7] * K07[5]
            + D01[8] * K08[5]
            + D01[9] * K09[5]
            + D01[10] * K10[5]
            + D01[11] * K11[5]
            + D01[12] * K12[5]
            + D01[13] * K13[5]
            + D01[14] * K14[5]
            + D01[15] * K15[5]
        )
        * h,
    )

    F05 = (
        (
            D02[0] * K00[0]
            + D02[1] * K01[0]
            + D02[2] * K02[0]
            + D02[3] * K03[0]
            + D02[4] * K04[0]
            + D02[5] * K05[0]
            + D02[6] * K06[0]
            + D02[7] * K07[0]
            + D02[8] * K08[0]
            + D02[9] * K09[0]
            + D02[10] * K10[0]
            + D02[11] * K11[0]
            + D02[12] * K12[0]
            + D02[13] * K13[0]
            + D02[14] * K14[0]
            + D02[15] * K15[0]
        )
        * h,
        (
            D02[0] * K00[1]
            + D02[1] * K01[1]
            + D02[2] * K02[1]
            + D02[3] * K03[1]
            + D02[4] * K04[1]
            + D02[5] * K05[1]
            + D02[6] * K06[1]
            + D02[7] * K07[1]
            + D02[8] * K08[1]
            + D02[9] * K09[1]
            + D02[10] * K10[1]
            + D02[11] * K11[1]
            + D02[12] * K12[1]
            + D02[13] * K13[1]
            + D02[14] * K14[1]
            + D02[15] * K15[1]
        )
        * h,
        (
            D02[0] * K00[2]
            + D02[1] * K01[2]
            + D02[2] * K02[2]
            + D02[3] * K03[2]
            + D02[4] * K04[2]
            + D02[5] * K05[2]
            + D02[6] * K06[2]
            + D02[7] * K07[2]
            + D02[8] * K08[2]
            + D02[9] * K09[2]
            + D02[10] * K10[2]
            + D02[11] * K11[2]
            + D02[12] * K12[2]
            + D02[13] * K13[2]
            + D02[14] * K14[2]
            + D02[15] * K15[2]
        )
        * h,
        (
            D02[0] * K00[3]
            + D02[1] * K01[3]
            + D02[2] * K02[3]
            + D02[3] * K03[3]
            + D02[4] * K04[3]
            + D02[5] * K05[3]
            + D02[6] * K06[3]
            + D02[7] * K07[3]
            + D02[8] * K08[3]
            + D02[9] * K09[3]
            + D02[10] * K10[3]
            + D02[11] * K11[3]
            + D02[12] * K12[3]
            + D02[13] * K13[3]
            + D02[14] * K14[3]
            + D02[15] * K15[3]
        )
        * h,
        (
            D02[0] * K00[4]
            + D02[1] * K01[4]
            + D02[2] * K02[4]
            + D02[3] * K03[4]
            + D02[4] * K04[4]
            + D02[5] * K05[4]
            + D02[6] * K06[4]
            + D02[7] * K07[4]
            + D02[8] * K08[4]
            + D02[9] * K09[4]
            + D02[10] * K10[4]
            + D02[11] * K11[4]
            + D02[12] * K12[4]
            + D02[13] * K13[4]
            + D02[14] * K14[4]
            + D02[15] * K15[4]
        )
        * h,
        (
            D02[0] * K00[5]
            + D02[1] * K01[5]
            + D02[2] * K02[5]
            + D02[3] * K03[5]
            + D02[4] * K04[5]
            + D02[5] * K05[5]
            + D02[6] * K06[5]
            + D02[7] * K07[5]
            + D02[8] * K08[5]
            + D02[9] * K09[5]
            + D02[10] * K10[5]
            + D02[11] * K11[5]
            + D02[12] * K12[5]
            + D02[13] * K13[5]
            + D02[14] * K14[5]
            + D02[15] * K15[5]
        )
        * h,
    )

    F06 = (
        (
            D03[0] * K00[0]
            + D03[1] * K01[0]
            + D03[2] * K02[0]
            + D03[3] * K03[0]
            + D03[4] * K04[0]
            + D03[5] * K05[0]
            + D03[6] * K06[0]
            + D03[7] * K07[0]
            + D03[8] * K08[0]
            + D03[9] * K09[0]
            + D03[10] * K10[0]
            + D03[11] * K11[0]
            + D03[12] * K12[0]
            + D03[13] * K13[0]
            + D03[14] * K14[0]
            + D03[15] * K15[0]
        )
        * h,
        (
            D03[0] * K00[1]
            + D03[1] * K01[1]
            + D03[2] * K02[1]
            + D03[3] * K03[1]
            + D03[4] * K04[1]
            + D03[5] * K05[1]
            + D03[6] * K06[1]
            + D03[7] * K07[1]
            + D03[8] * K08[1]
            + D03[9] * K09[1]
            + D03[10] * K10[1]
            + D03[11] * K11[1]
            + D03[12] * K12[1]
            + D03[13] * K13[1]
            + D03[14] * K14[1]
            + D03[15] * K15[1]
        )
        * h,
        (
            D03[0] * K00[2]
            + D03[1] * K01[2]
            + D03[2] * K02[2]
            + D03[3] * K03[2]
            + D03[4] * K04[2]
            + D03[5] * K05[2]
            + D03[6] * K06[2]
            + D03[7] * K07[2]
            + D03[8] * K08[2]
            + D03[9] * K09[2]
            + D03[10] * K10[2]
            + D03[11] * K11[2]
            + D03[12] * K12[2]
            + D03[13] * K13[2]
            + D03[14] * K14[2]
            + D03[15] * K15[2]
        )
        * h,
        (
            D03[0] * K00[3]
            + D03[1] * K01[3]
            + D03[2] * K02[3]
            + D03[3] * K03[3]
            + D03[4] * K04[3]
            + D03[5] * K05[3]
            + D03[6] * K06[3]
            + D03[7] * K07[3]
            + D03[8] * K08[3]
            + D03[9] * K09[3]
            + D03[10] * K10[3]
            + D03[11] * K11[3]
            + D03[12] * K12[3]
            + D03[13] * K13[3]
            + D03[14] * K14[3]
            + D03[15] * K15[3]
        )
        * h,
        (
            D03[0] * K00[4]
            + D03[1] * K01[4]
            + D03[2] * K02[4]
            + D03[3] * K03[4]
            + D03[4] * K04[4]
            + D03[5] * K05[4]
            + D03[6] * K06[4]
            + D03[7] * K07[4]
            + D03[8] * K08[4]
            + D03[9] * K09[4]
            + D03[10] * K10[4]
            + D03[11] * K11[4]
            + D03[12] * K12[4]
            + D03[13] * K13[4]
            + D03[14] * K14[4]
            + D03[15] * K15[4]
        )
        * h,
        (
            D03[0] * K00[5]
            + D03[1] * K01[5]
            + D03[2] * K02[5]
            + D03[3] * K03[5]
            + D03[4] * K04[5]
            + D03[5] * K05[5]
            + D03[6] * K06[5]
            + D03[7] * K07[5]
            + D03[8] * K08[5]
            + D03[9] * K09[5]
            + D03[10] * K10[5]
            + D03[11] * K11[5]
            + D03[12] * K12[5]
            + D03[13] * K13[5]
            + D03[14] * K14[5]
            + D03[15] * K15[5]
        )
        * h,
    )

    return (
        t_old,
        t - t_old,  # h
        rr_old,
        vv_old,
        (F00, F01, F02, F03, F04, F05, F06),
    )
