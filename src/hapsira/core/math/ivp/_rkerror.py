from math import sqrt

from ._const import N_RV, KSIG
from ._dop853_coefficients import E3 as _E3, E5 as _E5
from ..ieee754 import float_
from ...jit import hjit


__all__ = [
    "estimate_error_norm_V_hf",
]


E3 = tuple(float_(number) for number in _E3)  # N_STAGES + 1
E5 = tuple(float_(number) for number in _E5)  # N_STAGES + 1


@hjit(f"f({KSIG:s},f,V,V)")
def estimate_error_norm_V_hf(K, h, scale_r, scale_v):
    K00, K01, K02, K03, K04, K05, K06, K07, K08, K09, K10, K11, K12 = K

    err3 = (
        (
            K00[0] * E3[0]
            + K01[0] * E3[1]
            + K02[0] * E3[2]
            + K03[0] * E3[3]
            + K04[0] * E3[4]
            + K05[0] * E3[5]
            + K06[0] * E3[6]
            + K07[0] * E3[7]
            + K08[0] * E3[8]
            + K09[0] * E3[9]
            + K10[0] * E3[10]
            + K11[0] * E3[11]
            + K12[0] * E3[12]
        )
        / scale_r[0],
        (
            K00[1] * E3[0]
            + K01[1] * E3[1]
            + K02[1] * E3[2]
            + K03[1] * E3[3]
            + K04[1] * E3[4]
            + K05[1] * E3[5]
            + K06[1] * E3[6]
            + K07[1] * E3[7]
            + K08[1] * E3[8]
            + K09[1] * E3[9]
            + K10[1] * E3[10]
            + K11[1] * E3[11]
            + K12[1] * E3[12]
        )
        / scale_r[1],
        (
            K00[2] * E3[0]
            + K01[2] * E3[1]
            + K02[2] * E3[2]
            + K03[2] * E3[3]
            + K04[2] * E3[4]
            + K05[2] * E3[5]
            + K06[2] * E3[6]
            + K07[2] * E3[7]
            + K08[2] * E3[8]
            + K09[2] * E3[9]
            + K10[2] * E3[10]
            + K11[2] * E3[11]
            + K12[2] * E3[12]
        )
        / scale_r[2],
        (
            K00[3] * E3[0]
            + K01[3] * E3[1]
            + K02[3] * E3[2]
            + K03[3] * E3[3]
            + K04[3] * E3[4]
            + K05[3] * E3[5]
            + K06[3] * E3[6]
            + K07[3] * E3[7]
            + K08[3] * E3[8]
            + K09[3] * E3[9]
            + K10[3] * E3[10]
            + K11[3] * E3[11]
            + K12[3] * E3[12]
        )
        / scale_v[0],
        (
            K00[4] * E3[0]
            + K01[4] * E3[1]
            + K02[4] * E3[2]
            + K03[4] * E3[3]
            + K04[4] * E3[4]
            + K05[4] * E3[5]
            + K06[4] * E3[6]
            + K07[4] * E3[7]
            + K08[4] * E3[8]
            + K09[4] * E3[9]
            + K10[4] * E3[10]
            + K11[4] * E3[11]
            + K12[4] * E3[12]
        )
        / scale_v[1],
        (
            K00[5] * E3[0]
            + K01[5] * E3[1]
            + K02[5] * E3[2]
            + K03[5] * E3[3]
            + K04[5] * E3[4]
            + K05[5] * E3[5]
            + K06[5] * E3[6]
            + K07[5] * E3[7]
            + K08[5] * E3[8]
            + K09[5] * E3[9]
            + K10[5] * E3[10]
            + K11[5] * E3[11]
            + K12[5] * E3[12]
        )
        / scale_v[2],
    )
    err5 = (
        (
            K00[0] * E5[0]
            + K01[0] * E5[1]
            + K02[0] * E5[2]
            + K03[0] * E5[3]
            + K04[0] * E5[4]
            + K05[0] * E5[5]
            + K06[0] * E5[6]
            + K07[0] * E5[7]
            + K08[0] * E5[8]
            + K09[0] * E5[9]
            + K10[0] * E5[10]
            + K11[0] * E5[11]
            + K12[0] * E5[12]
        )
        / scale_r[0],
        (
            K00[1] * E5[0]
            + K01[1] * E5[1]
            + K02[1] * E5[2]
            + K03[1] * E5[3]
            + K04[1] * E5[4]
            + K05[1] * E5[5]
            + K06[1] * E5[6]
            + K07[1] * E5[7]
            + K08[1] * E5[8]
            + K09[1] * E5[9]
            + K10[1] * E5[10]
            + K11[1] * E5[11]
            + K12[1] * E5[12]
        )
        / scale_r[1],
        (
            K00[2] * E5[0]
            + K01[2] * E5[1]
            + K02[2] * E5[2]
            + K03[2] * E5[3]
            + K04[2] * E5[4]
            + K05[2] * E5[5]
            + K06[2] * E5[6]
            + K07[2] * E5[7]
            + K08[2] * E5[8]
            + K09[2] * E5[9]
            + K10[2] * E5[10]
            + K11[2] * E5[11]
            + K12[2] * E5[12]
        )
        / scale_r[2],
        (
            K00[3] * E5[0]
            + K01[3] * E5[1]
            + K02[3] * E5[2]
            + K03[3] * E5[3]
            + K04[3] * E5[4]
            + K05[3] * E5[5]
            + K06[3] * E5[6]
            + K07[3] * E5[7]
            + K08[3] * E5[8]
            + K09[3] * E5[9]
            + K10[3] * E5[10]
            + K11[3] * E5[11]
            + K12[3] * E5[12]
        )
        / scale_v[0],
        (
            K00[4] * E5[0]
            + K01[4] * E5[1]
            + K02[4] * E5[2]
            + K03[4] * E5[3]
            + K04[4] * E5[4]
            + K05[4] * E5[5]
            + K06[4] * E5[6]
            + K07[4] * E5[7]
            + K08[4] * E5[8]
            + K09[4] * E5[9]
            + K10[4] * E5[10]
            + K11[4] * E5[11]
            + K12[4] * E5[12]
        )
        / scale_v[1],
        (
            K00[5] * E5[0]
            + K01[5] * E5[1]
            + K02[5] * E5[2]
            + K03[5] * E5[3]
            + K04[5] * E5[4]
            + K05[5] * E5[5]
            + K06[5] * E5[6]
            + K07[5] * E5[7]
            + K08[5] * E5[8]
            + K09[5] * E5[9]
            + K10[5] * E5[10]
            + K11[5] * E5[11]
            + K12[5] * E5[12]
        )
        / scale_v[2],
    )

    err5_norm_2 = (
        err5[0] ** 2
        + err5[1] ** 2
        + err5[2] ** 2
        + err5[3] ** 2
        + err5[4] ** 2
        + err5[5] ** 2
    )
    err3_norm_2 = (
        err3[0] ** 2
        + err3[1] ** 2
        + err3[2] ** 2
        + err3[3] ** 2
        + err3[4] ** 2
        + err3[5] ** 2
    )

    if err5_norm_2 == 0 and err3_norm_2 == 0:
        return 0.0
    denom = err5_norm_2 + 0.01 * err3_norm_2

    return abs(h) * err5_norm_2 / sqrt(denom * N_RV)
